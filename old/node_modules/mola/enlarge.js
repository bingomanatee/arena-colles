var MOLA = require('mola');
var Math_util = require('util/math');
var Stat = require('util/stat');
var Canvas = require('canvas');

module.exports = {    
        
    _enlarge: function(x){
        var data = this.data.slice(0);
        
        var scale = 1;
        
        for (var iter = 1; iter <= x; ++iter){
            scale = 2 * scale;
            
            data = this._enlarge_data(scale, data);
        }
    },
    
    _scale_rows: function(s){
        return this.get_rows() * s;
    },
    
    _scale_cols: function(s){
        return this.get_cols() * s;
    },
    
    _enlarge_data: function(scale, data){
        var self = this;
        
         var data_buckets = [];
         
         var current_rows = this._scale_rows(scale/2);
         var current_cols = this._scale_cols(scale/2);
         
         var new_rows = this._scale_rows(scale);
         var new_cols = this._scale_cols(scale);
         
         for (var i = 0; i < current_rows; ++i)
         for (var j = 0; j < current_cols; ++j) {
            var current_i = i * scale/2;
            var current_j = j * scale/2;
            var new_i = i * scale;
            var new_j = j * scale;
            
            var offset = (current_i * current_rows) + current_j;
            var old_height = data[offset];
            
            var n = this._neighborhood(new_i, new_j, new_rows, new_cols);
            n = _.select(n, function(v){return !_.isNull(v);});
            
            n.forEach(function(pair){
                var new_offset = (pair[0] * new_cols) + pair[1];
                if (data_buckets[new_offset]){
                    data_buckets[new_offset].push(old_height);
                } else {
                    data_buckets[new_offset] = [old_height];
                }
            });
            
            //@TODO: collapse buckets. 
         }
    },
    
    load: function() {
        console.log(__filename, '::enlarge() loading');

        if (!(MOLA.extensions.hasOwnProperty('enlarge') && MOLA.extensions.enlarge)) {
            for (var prop in module.exports) {
                if (prop != 'load') {
                    MOLA.prototype[prop] = module.exports[prop];
                }

            }

            MOLA.extensions.enlarge = true;
            console.log(__filename, ':: LOADED');
        }

    }
    
}