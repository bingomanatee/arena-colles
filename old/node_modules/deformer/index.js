var ejs = require('ejs');
var fs = require('fs');
var properties_template = fs.readFileSync(__dirname + '/templates/properties.html').toString();

module.exports = function(values, fields, configs) {
    var self = this;

    if (!configs) {
        configs = {};
    }

    _.defaults(configs, {
        method: 'POST',
        action: '',
        templates: {}
    });
    _.defaults(configs.templates, {
        form: 'form'
    });

    this.values = values ? values : {};
    this.configs = configs;
    this.templates = configs.templates;
    this.fields = fields ? fields : [];

    if (this.configs.hasOwnProperty('context')) {
        this._contextualize();
    }
}

module.exports.prototype.init = require('./form/init');

module.exports.prototype._contextualize = require('./form/ctx');

module.exports.prototype.ensure_submit_button = function() {
    var submit_found = false;

    this.fields.forEach(function(field) {
        if (!submit_found && field.type == 'submit') {
            submit_found = true;
        }

    })
    if (!submit_found) {
        this.fields.push({
            type: 'submit',
            name: 'submit',
            label: '',
            value: 'Save'
        });
    }
}

module.exports.prototype.render = function() {
    var self = this;

    for (var name in this.values) {
        self.fields.forEach(function(field) {
            if (field.name == name) {
                field.value = self.values[name];
            }
        })
    }

    this.fields.forEach(function(field) {
        self.render_field(self, field);
    });

    return this.render_form();
}

module.exports.prototype.set_form_properties = function() {
    if (this.configs.hasOwnProperty('properties') && this.configs.properties) {
        if (typeof(this.configs.properties) == 'object') {
            this.configs.properties = ejs.render(properties_template, {
                locals: {
                    properties: this.configs.properties
                }
            });
        }
        this.properties = this.configs.properties;
    } else {
        this.properties = '';
    }
}

module.exports.prototype.labellize = function(name) {
    return name ? this.toTitleCase(name.replace('_', ' ')) : ''; // @TODO: better word caps
}

module.exports.prototype.toTitleCase = function(item) {
    return item.replace(/([\w&`'ту"р.@:\/\{\(\[<>_]+-? *)/g, function(match, p1, index, title) {
        if (index > 0 && title.charAt(index - 2) !== ":" && match.search(/^(a(nd?|s|t)?|b(ut|y)|en|for|i[fn]|o[fnr]|t(he|o)|vs?\.?|via)[ \-]/i) > -1) return match.toLowerCase();
        if (title.substring(index - 1, index + 1).search(/['"_{(\[]/) > -1) return match.charAt(0) + match.charAt(1).toUpperCase() + match.substr(2);
        if (match.substr(1).search(/[A-Z]+|&|[\w]+[._][\w]+/) > -1 || title.substring(index - 1, index + 1).search(/[\])}]/) > -1) return match;
        return match.charAt(0).toUpperCase() + match.substr(1);
    });
};

module.exports.prototype._template_path = require('./form/template_path');

module.exports.prototype.render_field = require('./form/render_field');

module.exports.prototype.render_form = function() {
    this.set_form_properties();
    console.log(__filename, ': render_form(): properties = ', this.properties);
    var template_path = this._template_path(this, {
        type: 'form'
    });

    var template_file = fs.readFileSync(template_path, 'utf8');

    return ejs.render(template_file, {
        locals: this
    });

}