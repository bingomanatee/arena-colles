var Deformer = require('deformer');
var path_module = require('path');
/**
 * retrieves a form for a given controler and action. 
 *
 * There is one of three possible ways to generate a form:
 *  1. For a "one size fits all" form,
 *      attach a form object to your controller with a configs and fields property:
 *     {
 forms: {default:
 {
 fields: [{} .. {}],
 configs: {}
 }
 }
 *      }
 
 *  2: For contextual forms (i.e., when "add" form is different from "edit" form, etc.)
 *     attach a forms property whose names property/value pairs are the same
 *     as forms above:
 *     {
 forms: {
 add: {fields: [], configs: {}},
 edit: {..} ...
 }
 }
 
 3: For completely custom forms, include a module in this folder with the same name
 as this (for controller foo):
 controller/foo/forms/add.js
 
 or
 
 controller/foo/forms/index.js
 */
module.exports = function(callback, controller, action, values, configs) {
    
    if (typeof(callback) != 'function'){
       // console.log(__filename, 'Bad callback to forms: ', callback);
        throw new Error('bad callback to mvc/forms');
    }
    
    var fields = [];

    if (!values) {
        values = {};
    }

    if (!configs) {
        configs = {};
    }
    
    if (typeof(controller) == 'string') {
        controller = require(MVC_CONTROLLERS + '/' + controller);
    }
    
    var form_path = MVC_CONTROLLERS + '/' + controller.name + '/forms/' + action;

    if (configs.hasOwnProperty('controller_action')) {
        action = configs.controller_action;
    }
    
    var form_file = form_path + '.js';
   // console.log(__filename, ': searching for ', form_file);
    
    if (path_module.existsSync(form_file)){
       // console.log(__filename, ': found ', form_file);
        var form_module = require(form_path);
        if (form_module.hasOwnProperty('form') && typeof(form_module.form) == 'function'){
           // console.log(__filename, ':: found function');
            return form_module.form(callback, values, configs);
        }
        var form_def = form_module;
    } else if (controller.hasOwnProperty('forms')) {
       // console.log(__filename, 'found controller ', controller.name, ' forms');
        if (action && controller.forms.hasOwnProperty(action)) {
            var form_def = controller.forms[action];
           // console.log(__filename, ' controller ', controller.name, ' forms ', action, ' def: ', form_def);
        } else if (controller.forms.hasOwnProperty('default')){
            var form_def = controller.forms.default;
           // console.log(__filename, ' controller ', controller.name, ' forms default def: ', form_def);
        } else {
            return callback(null, false);
        }
    } else {
        return callback(null, false);
    }
    
    if (form_def){
        if (form_def.hasOwnProperty('fields')){
            fields = form_def.fields;
        }
        if (form_def.hasOwnProperty('configs')) {
            _.defaults(configs, form_def.configs);
        }
    }
    
    var form = new Deformer(values, fields, configs);
    
    console.log(__filename, ': initializing callback: ', callback, ': form: ', form);
    form.init(callback);
}
