var util = require('util');
var _ = require('underscore');
var a = require('assert');
var Gate = require('util/gate');

/**
 *
 * @param suite
 * @param options : object
 *        the only known property of object is debug, a number from 0 ... 3;
 *        messages are thrown if their say number is <= the debug number.
 */
function Test_Suite(suite, options) {

    if (_.isArray(suite)) {
        suite = {tests: suite};
    }

    var self = this;

    this.options = _.defaults(options ? options : {}, {debug: 0});
    this.suite = suite;

    if (_.isString(suite)) {
        suite = require(suite);
    }

}

Test_Suite.prototype = {

    is: a.equal,
    eq: a.equal,
    isnt: a.notEqual,
    ne: a.notEqual,
    true: a.ok,
    ok: a.ok,
    like: require('unit/Test/like'),
    unlike: require('unit/Test/unlike'),
    alike: require('unit/Test/alike'),
    dislike: require('unit/Test/unalike'),

    is_d: a.deepEqual,
    isnt_d: a.notDeepEqual,

    false: function(b, n) {
        return a.ok(!b, n)
    },
    bad: function(b, n) {
        return a.ok(!b, n)
    },

    run: function() {

        console.log('options: ' + util.inspect(this.options));

        this.before_all();
        if (this.options.hasOwnProperty('before_all_with_callback') && this.options.before_all_with_callback) {
            var self = this;
            this.options.before_all_with_callback.call(self, function() {
                self._run.call(self);
            });
        } else {
            this._run();
        }

    },

    _run: function() {
        var suite_name = this.suite_name();
        var self = this;
        if (this.suite.tests) {
            for (var name in this.suite.tests) {
                try {
                    var test = this.suite.tests[name];

                    this.before_each.call(this, test, name);

                    self.say(2, '_________ START TEST "' + name + ' of suite ' + suite_name + '"__________' + "\n");
                    try {
                        test.call(this, name);
                    } catch (err) {
                        console.log('TEST ERROR: ', util.inspect(err));
                        // note - will MOST LIKELY NOT catch any errors inside callbacks.
                    }
                    self.say(2, '_________ DONE WITH  TEST "' + name +' of suite ' + suite_name + '"__________' + "\n");

                    this.after_each.call(this, test, name);

                } catch (e) {
                    console.log('ERROR: ', util.inspect(e));
                }

            }
        }

        if (this.suite.tests_with_callback) {
            var self = this;
            var gate = new Gate(function() {
                self.after_all()
            });
            for (var name in this.suite.tests_with_callback) {
                test = this.suite.tests_with_callback[name];
                this._do_test_cb(name, test, gate);
            }

            gate.start();
        } else {
            this.after_all();
        }
    },

    _do_test_cb: function(name, test, gate) {
        var self = this;
        self.say(2, '_________ START TEST "' + name + '"__________' + "\n");

        self.before_each.call(self, test, name); // @TODO: callback friendly befores
        gate.task_start();
        try {
            test.call(self, name, function() {
                self.say(2, '_________ *DONE WITH  TEST "' + name + '"__________' + "\n");
                self.after_each.call(self, test, name);
                gate.task_done();
            });
        } catch (err) {
            util.log('TEST ERROR: ', err.message);
            gate.task_done();
            // note - will MOST LIKELY NOT catch any errors inside callbacks.
        }

    },

    say: function(level, msg) {
        if (arguments.length < 2) {
            msg = level;
            level = 1;
        }
        if (this.options.debug === true) {
            var d = 1;
        } else if (this.options.debug == false) {
            var d = 0;
        } else {
            var d = this.options.debug;
        }

        if (d < level) {
            return
        }

        util.log(this.suite_name() + '    ' + msg);
    },

    suite_name: function() {
        return this.suite.hasOwnProperty('name') ?
            (this.suite.name ? this.suite.name : '(Please name this test suite!')
            : '(Please name your test suite!';
    },

    before_all: function() {

        this.say(1, '_________ START __________' + "\n");

        var self = this;

        this.say(2, ' --- before all()  ---');

        if (this.options.hasOwnProperty('before_all')) {
            // note - if both options AND the test have before_all,
            // opitons.before_all is responsible for calling the test before_all.
            this.options.before_all.call(self, this.suite_name());
        } else if (this.suite.hasOwnProperty('before_all')) {
            this.suite.before_all.call(self, this.suite_name());
        }
        this.say(2, ' --- done with before all()  ---');

    },

    before_all_with_callback: function(cb) {
        //@TODO: add a after_all_with_callback
        this.say(2, ' --- before all with callback(cb)  ---');
        if (this.options.hasOwnProperty('before_all_with_callback') && this.options.before_all_with_callback) {
            this.options.before_all_with_callback(cb);
        } else {
            cb();
        }
    },

    after_all: function() {
        var self = this;

        this.say(2, ' --- after all()  ---');

        if (this.options.hasOwnProperty('after_all')) {
            // note - if both options AND the test have after_all,
            // opitons.after_all is responsible for calling the test after_all.
            this.options.after_all.call(self);
        } else if (this.suite.hasOwnProperty('after_all')) {
            this.suite.after_all.call(self);
        }

        this.say(2, ' --- done with after all()  ---');
        this.say(1, '_________ DONE __________' + "\n");

    },

    before_each: function(test, name) {
        this.say(2, ' --- before each  "' + name + '"__________' + "\n");

        var self = this;

        if (this.options.hasOwnProperty('before_each')) {
            // note - if both options AND the test have before_each,
            // opitons.before_each is responsible for calling the test before_each.
            this.options.before_each.call(self, test, name);
        } else if (this.suite.hasOwnProperty('before_each')) {
            this.suite.before_each.call(self, suite, test, name);
        }

        this.say(2, ' --- done with before each "' + name + '"__________' + "\n");
    },

    after_each: function(test, name) {
        this.say(2, ' --- after each  "' + name + '"__________' + "\n");
        var self = this;

        if (this.options.hasOwnProperty('after_each')) {
            // note - if both options AND the test have after_each,
            // opitons.after_each is responsible for calling the test after_each.
            this.options.after_each.call(self, test, name);
        } else if (this.suite.hasOwnProperty('after_each')) {
            this.suite.after_each.call(self, suite, test, name);
        }
        this.say(2, ' --- done with after each "' + name + '"__________' + "\n");

    }

}


module.exports = Test_Suite;