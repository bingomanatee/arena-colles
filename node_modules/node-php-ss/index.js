var path = require('path');
var users_model = require('models/users');
var child_process = require('child_process');

module.exports.php_script = function(filename, args, callback) {

        var php_args = [];
        
        if (PHP_INI){
            php_args.push('--php-ini');
            php_args.push(PHP_INI);
        }
        
        php_args.push('-f');
        php_args.push(filename);
        
        if (typeof(args) == 'function'){
            callback = args;
        } else {
            args.forEach(function(arg){php_args.push(arg);});
        }
        
        var spawn = child_process.spawn;
        var php_process = spawn(PHP_BINARY, args);
        
        var out = null;
        
        php_process.stdout.on('data', function(data) {
            if (data) {
                out += data.toString();
            } else {
                out = data.toString();
            }
        });

        php_process.stderr.on('error', function(err) {
            callback(err);
        });

        php_process.on('exit', function(code) {
            callback(null, {out: out, code: code});
        });
};

module.exports.load_php = function(config_file){
    if (!config_file){
        config_file = './config';
    }
    var php_configs = require(config_file);
    
    var found = false;
    php_configs.forEach(function(config){
        if (!found &&
            path.existsSync(config.binary) &&
            ((!config.ini) || path.existsSync(config.ini))
            ) { 
            global.PHP_BINARY = config.binary;
            global.PHP_INI = config.ini;
            
             // console.log(__filename, ': PHP configuration: ', config);
            found = true;
        } else {
            // console.log(__filename, ': NOT using PHP config ', config);  
        };
    });
}