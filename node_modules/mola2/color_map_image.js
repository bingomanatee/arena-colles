var mu = require('util/math');
var mars_scale = require('mola2/scale')()
var color_util = require('util/colors/scale');
var _ = require('underscore');

var echo = 0;
var rg = 3;
function _shadow(data, x, y) {
    var h = data[y][x];

    if (h < 0) return 0;

    var min_x = Math.max(0, x - rg);
    var max_x = Math.min(data[0].length - 1, x + rg);

    var min_y = Math.max(0, y - rg);
    var max_y = Math.min(data.length - 1, y + rg);

    var diffs = [];
    var height_diff = 0;
    var measures = 0;
    for (var xscan = min_x; xscan <= max_x; ++xscan) {
        for (var yscan = min_y; yscan <= max_y; ++yscan) {
            var xdist = (xscan - x);
            var ydist = (yscan - y);
            var dd = (xdist * xdist) + (ydist * ydist);
            if (dd) {
                var diff = parseInt(data[yscan][xscan]) - h;
                height_diff += (diff * 2)/ (dd); // Math.abs
                ++measures;
            }
        }
    }

    return parseInt(height_diff/measures);

}

module.exports = function(data, x, y, zoom) {
    var h = data[y][x];

    var measure = color_util.nearest(h, mars_scale);


    var shadow = _shadow(data, x, y);


    if (!(++echo % 1000000)) {
        console.log('measure of', h, 'is', measure, 'shade:', shadow);
    }
 //   if (shadow > 0) {
        return _shade(measure.rgb, shadow);
  //  }

  //  return measure.rgb;
}

function _shade(rgb, shadow) {
    if (!(echo % 1000000)) {
        console.log('shade:', shadow);
    }

    var out = [rgb[0] - shadow, rgb[1] - shadow, rgb[2] - shadow, 255];

    /*
     var orig_ratio = 10 / Math.abs(shadow);
     if (shadow > 0){
     orig_ratio = Math.max(0.5, orig_ratio);
     }

     var out = [orig_ratio * rgb[0], orig_ratio * rgb[1], orig_ratio * rgb[2], 255];
     if (shadow > 0) {
     var shaded_radio = 1 - orig_ratio;
     out[0] += 255 * shaded_radio;
     out[1] += 255 * shaded_radio;
     out[2] += 255 * shaded_radio;
     }

     */
    return _.map(out, function(v) {
        return mu.clamp(v, 0, 255, true)
    });
}

/*
 module.exports = function(h, base, ctx_image) {
 var rb = h / 2;
 var r = mu.clamp(rb, 0, 255, true);
 var gb = (Math.abs(h) / 10);
 var g = mu.clamp(gb, 0, 255, true);
 if (h < 0) g = 255 - g;
 if (h > 0) {
 var bb = h / 15 - 100; //Math.abs(Math.sqrt(h));
 } else {
 var bb = 255 +  h / 100;

 }
 var b = mu.clamp(bb, 0, 255, true);
 if (ctx_image) {
 ctx_image.data[base] = r
 ctx_image.data[base + 1] = g
 ctx_image.data[base + 2] = b
 ctx_image.data[base + 3] = 255;
 } else {
 return [r, g, b];
 }
 } */