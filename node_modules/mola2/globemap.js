var globe_data_path = MVC_ROOT + '/resources/mola_32/megt90n000fb.img';
var import = require('mola2/import');
var fs = require('fs');
var height_calc = require('mola2/height_calc');
var gray_map = require('mola2/gray_map');

module.exports = function(manifest_path) {
    this.manifest_path = manifest_path;
    this.manifest = JSON.parse(fs.readFileSync(manifest_path).toString()).manifest[0];
    console.log('manifest: ', JSON.stringify(this.manifest, null, 3));
    this.parse_manifest();
    this.data = false;

}

module.exports.prototype = {

    load: function(callback) {
        var path = this.image_file = this.manifest.image_file;
        var self = this;
        console.log('path: ', path);
        import(this, function(err, data) {
            self.data = data;
            callback();
        })

    },

    render: function () {
        console.log('calculating normals');
        var normals = this.calculate_normals();

        var sun = [-1, -1, 0];
        console.log('normals to shades');
        var shades = _.map(normals, function(n) {
            return 1 - (height_calc.vect_dist((sun,n) / 2));
        });
        console.log('generating shade map');
        shade_map = gray_map(shades, this.rows, this.cols);
        console.log('done rendering');
        return shade_map;
    },

    calculate_normals: function() {
        var normals = [];
        var last_percent = 0;
        for (var i = 0; i < this.rows; ++i) {
            var percent = i/this.rows;
            if (percent - last_percent >= 0.05){
                console.log('normals: ', parseInt(100 * percent), '% done');
                last_percent = percent;
            }
            var normal_row = [];
            for (j = 0; j < this.cols; ++j) {
                normal_row.push(height_calc.normal(this, i, j));
            }
            normals.push(normal_row);
        }

        return normals;
    },

    parse_manifest: function() {
        console.log('parsing manifest ', this.manifest.notes);
        this.rows = parseInt(this.manifest.notes.lines);
        this.cols = parseInt(this.manifest.notes.line_samples);
    }

}