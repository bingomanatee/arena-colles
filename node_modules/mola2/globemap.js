var globe_data_path = MVC_ROOT + '/resources/mola_32/megt90n000fb.img';
var mola_import = require('mola2/import');
var fs = require('fs');
var height_calc = require('mola2/height_calc');
var gray_map = require('mola2/gray_map');
var Canvas = require('canvas');
var mu = require('util/math');

module.exports = function(manifest_path) {
    this.manifest_path = manifest_path;
    this.manifest = JSON.parse(fs.readFileSync(manifest_path).toString()).manifest[0];
    console.log('manifest: ', JSON.stringify(this.manifest, null, 3));
    this.parse_manifest();
    this.data = false;

}

module.exports.prototype = {

    load: function(callback) {
        var path = this.image_file = this.manifest.image_file;
        var self = this;
        console.log('path: ', path);
        mola_import(this, function(err, data) {
            self.data = data;
            callback();
        })

    },

    shade: function() {
        var shades = [];
        for (var i = 0; i < this.rows; ++i) {
            var n_row = [];
            for (var j = 0; j < this.cols; ++j) {
                var shade = this.normals[i][j][0] + this.normals[i][j][1];
                n_row.push(shade);
            }
            this.shades.push(n_row);
        }

    },

    render: function () {
        console.log('calculating normals');
        var i_inc = 64;
        var final_shade_map = new Canvas(this.cols, this.rows); //(this.rows, this.cols);
        var fctx = final_shade_map.getContext('2d');
        var id = fctx.createImageData(this.cols, this.rows);
        var max = Math.max.apply(Math, this.data[2000]);
        var min = Math.min.apply(Math, this.data[2000]);
        console.log('min: ', min, 'max: ', max);
        //   console.log('this.data: ', this.data[1000].slice(0, 500).join(','));
        var p = 0, pp = 0, last_percent = 0, points = this.rows * this.cols;

        for (var i = 0; i < this.rows; ++i) {
            for (var j = 0; j < this.cols; ++j) {
                var value = this.data[i][j];
                var shade = mu.rescale(value, min, max, 0, 255, true);
                //  if (!((i + j) % 100)) console.log('value: ', value, ', shade:', shade);
                var base = (this.cols * i + j) * 4;
                id.data[base] = id.data[base + 1] = id.data[base + 2] = shade;
                id.data[base + 3] = 255;
                p++;
                pp = (p / points);
                if ((pp - last_percent) > 0.01) {
                    console.log(parseInt(pp * 100), '% done');
                    last_percent = pp;
                }
            }
        }

        var self = this;
        points = 1000 * 500;
        last_percent = 0;
        p = 0;
        pp = 0;


        fctx.putImageData(id, 0, 0);

        console.log('done rendering');
        return final_shade_map;
    },

    normal_map: function() {
        var canvas = new Canvas(this.cols, this.rows);
        var ctx = canvas.getContext('2d');
        var image_data = ctx.createImageData(this.cols, this.rows);

        var p = 0, points = this.rows * this.cols, last_percent = 0;
        for (var n = 0; n < image_data.data.length; ++n) {
            image_data.data[n] = 255;
        }

        for (var i = 0; i < this.rows; ++i) {
            for (var j = 0; j < this.cols; ++j) {
                var base = ((this.cols * i) + j) * 4;
                var normal = this.calculate_normal(i, j);
                p++;
                pp = (p / points);
                if ((pp - last_percent) > 0.01) {
                    console.log(normal);
                    console.log(parseInt(pp * 100), '%k done');
                    last_percent = pp;
                }
                image_data.data[base] = normal[0];
                image_data.data[base + 1] = normal[1];

            }
        }

        ctx.putImageData(image_data, 0, 0);

        return canvas;
    },

    /**
     * currently blows the memory stack
     */

    load_normals: function() {
        this.normals = [];
        var p = 0, points = this.rows * this.cols, last_percent = 0;
        for (var i = 0; i < this.rows; ++i) {
            var n_row = [];
            for (var j = 0; j < this.cols; ++j) {
                var normal = this.calculate_normal(i, j);
                //  id[base + 3] = normal[3];
                p++;
                pp = (p / points);
                if ((pp - last_percent) > 0.01) {
                    console.log(normal);
                    console.log(parseInt(pp * 100), '%k done');
                    last_percent = pp;
                }
                n_row.push(normal);
            }
            this.normals.push(n_row);
        }
    },

    calculate_normal: function(i, j) {
        var y = 127,
            x = 127;
        if (i == 0) {
            // vertical top
            if (j == 0) {
                // vertical top, horizontal left
            } else if (j >= (this.cols - 2)) {
                //  vertical top, horizontal right
            } else {
                //  vertical top, center - MOST OF THE TIME
            }
        } else if (i >= this.rows - 2) {
            // vertical bottom
            if (j == 0) {
                // vertical bottom, horizontal left
            } else if (j >= (this.cols - 2)) {
                // vertical bottom, horizontal right
            } else {
                // vertical bottom, center - MOST OF THE TIME
            }
        } else {
            // vertical center
            if (j == 0) {
                // horizontal left
            } else if (j >= (this.cols - 2)) {
                // horizontal right
            } else {
                // center, center - MOST OF THE TIME
                x = this.data[i][j - 1] - this.data[i][j + 1] + 127;
                y = this.data[i - 1][j] - this.data[i + 1][j] + 127;
            }
        }
        return [x, y, 255, 255];
    },

    parse_manifest: function() {
        console.log('parsing manifest ', this.manifest.notes);
        this.rows = parseInt(this.manifest.notes.lines);
        this.cols = parseInt(this.manifest.notes.line_samples);
    }

}