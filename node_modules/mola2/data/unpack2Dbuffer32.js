var fs = require('fs');
var bin = require('util/binary');
var au = require('util/array');
var pm = require('path');
var neobuffer = require('neobuffer');
var _ = require('underscore');
var util = require('util');

module.exports = function(buffer, cols) {
    var ints = [];
    var int_rows = [];

    console.log(__filename, 'cols:', cols, 'buffer: ', util.inspect(buffer).slice(0, 100));

    
    if (!(buffer instanceof neobuffer.Buffer)){
        console.log('copying into neobuffer');
        try {
        var buffer2 = neobuffer.Buffer(buffer.length, 'binary');
        buffer2.write(buffer.toString());
        buffer = buffer2;
        } catch(e){
            console.log('buffer error', util.inspect(e));
            return [[]];
        }
    }

    for (var i = 0; i < buffer.length; i += 4){
        ints.push(buffer.readInt32(i, 'big'));

        while (ints.length >= cols) {
            var slice = ints.slice(0, cols);
            int_rows.push(slice);
            ints = ints.slice(cols);
        }

    }

    return int_rows;
    
}