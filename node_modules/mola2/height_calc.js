module.exports = {

    neighbors: function (src, i, j, rad) {
        if (!rad) rad = 1;

        var out = [];

        for (var rad_i = -1 * rad; rad_i <= rad; ++rad_i)
             var ii = i + rad_i;
        var row = [];
        for (var rad_j = -1 * rad; rad_j <= rad; ++rad_j) {
            var jj = j + rad_j;
            if ((ii >= 0) && (ii < src.cols)
                && (jj >= 0) && (jj < src.rows)
                ) {
                row.push(src.data[ii][jj]);
            } else {
                row.push(null);
            }
            out.push(row);
        }
        return out;
    },

    point: function(src, i, j, as_obj) {
        if ((i < 0) || (j < 0) || (i >= src.rows) || (j >= src.cols)) {
            return false;
        }
      //  console.log('getting point ', i, j);
        return as_obj ? {i: i, j: j, h: src.data[i][j]} : [i, j, src.data[i][j]];
    },

    _triangle: function (src, p1, p2, p3) {
        var p1 = this.point(src, p1[0], p1[1]);
        if (!p1) {
            return false;
        }
        var p2 = this.point(src, p2[0], p2[1]);
        if (!p2) {
            return false;
        }
        var p3 = this.point(src, p3[0], p3[1]);
        if (!p3) {
            return false;
        }
        return [p1, p2, p3];
    },

    normal: function(src, i, j, as_obj) {
        var ts = [];
        var center = this.point(src, i, j);
        var self = this;

        var points = [
            [i - 1, j - 1],
            [i,     j - 1],
            [i + 1, j - 1],

            [i - 1, j + 1],
            [i,     j + 1],
            [i + 1, j + 1],

            [i - 1, j],
            [i + 1, j]
        ];

        var heights = [];
        points.forEach(function(p){
           var ii = Math.max(0, Math.min(p[0] + i, src.rows - 1));
           var jj = Math.max(0, Math.min(p[0] + j, src.rows - 1));
           heights.push(self.point(src, ii, jj))[2];
        });

        var dy = heights[0]
               +  heights[1] * 2
               +  heights[2]
               -  heights[3]
               -  heights[4] * 2
               -  heights[5];

        var dx = -1 * heights[0]
                - heights[6] * 2
                - heights[3]

                + heights[2]
                + heights[7] * 2
                - heights[3]

                + heights[2]
                + heights[7] * 2
                + heights[5]

        var dz = 1;

        var length = Math.sqrt((dx * dx) + (dy * dy) + 1);

        return as_obj ? {i: dy/length, j: dx/length, h: 1/length} : [ dy/length, dx/length, 1/length];
    },

    vect_dist: function(v1, v2){
        var vd = [];
        vd[0] = v1[0] - v2[0];
        vd[1] = v1[1] - v2[1];
        vd[2] = v1[2] - v2[2];

        return Math.sqrt(vd[0] * vd[0] + vd[1] * vd[1] + vd[2] * vd[2]);
    }

}