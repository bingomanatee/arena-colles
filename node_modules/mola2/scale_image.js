var canvas_from_image = require('util/canvas/from_image');
var canvas_to_image = require('util/canvas/to_image');
var Canvas  = require('canvas');
var Stat    = require('util/stat');
var mu      = require('util/math');

/**
 *
 * @param img_path
 * @param scale - a divisor; scale 4 produces an image 1/4 as big
 */
module.exports = function(img_path, scale, output_path, callback) {

    var canvas = canvas_from_image(img_path); // the only purpose of this canvas is to find the height/width of the image
    var ctx = canvas.getContext('2d');
    var canvas_image = ctx.getImageData(0, 0, canvas.width, canvas.height);
    //context.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh);

    var new_canvas = new Canvas(parseInt(canvas.width / scale), parseInt(canvas.height / scale));
    var new_ctx = new_canvas.getContext('2d');
    var new_canvas_image = new_ctx.createImageData(new_canvas.width, new_canvas.height);

    for (var y = 0; y < new_canvas.height; ++y) {
        var y_base = 4 * y * new_canvas.width;
        for (var x = 0; x < new_canvas.width; ++x) {
            var rs = [];
            var gs = [];
            var bs = [];

            for (var yo = y * scale; yo < (y + 1) * scale; ++yo) {
                for (var xo = x * scale; xo < (x + 1) * scale; ++xo) {
                    var y_offset = 4 * yo * canvas.width;
                    var x_offset = xo * 4;
                    var base = y_offset + x_offset;
                    var r = canvas_image.data[base];
                    var g = canvas_image.data[base + 1];
                    var b = canvas_image.data[base + 2];
                    rs.push(r);
                    gs.push(g);
                    bs.push(b);
                }
            }

            var rstat = new Stat(rs);
            var gstat = new Stat(gs);
            var bstat = new Stat(bs);

            var ra = rstat.avg();
            var ga = gstat.avg();
            var ba = bstat.avg();
            
            var ni_base = y_base + (4 * x);
/*
            if ((!(x % 1000)) && (!(y % 1000))){
                console.log('rs:', rs, 'gs:', gs, 'bs:', bs);
                console.log('ra: ', ra, 'ga:', ga, 'ba:', ba);
                console.log('base:', ni_base);
            }*/
            new_canvas_image.data[ni_base]      = mu.clamp(ra, 0, 255, true);
            new_canvas_image.data[ni_base + 1]  = mu.clamp(ga, 0, 255, true);
            new_canvas_image.data[ni_base + 2]  = mu.clamp(ba, 0, 255, true);
            new_canvas_image.data[ni_base + 3]  = 255;

        }
    }

    new_ctx.putImageData(new_canvas_image, 0, 0);

    canvas_to_image(new_canvas, output_path, callback);
}