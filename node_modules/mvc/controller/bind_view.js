var path_module = require('path');
var _debug_views = false;
module.exports = function (cont_module, action_name, view_file) {
    if (!cont_module.hasOwnProperty('_views')) {
        cont_module._views = {};
    }
    if (view_file){
        if (_debug_views) console.log('BIND_VIEW: applying passed view ', view_file, ' to ', action_name);
        cont_module._views[action_name] = view_file;
    } else if (!cont_module._views.hasOwnProperty(action_name)) {
        view_file = MVC_VIEWS + '/' + cont_module.name + '/' + action_name + '.html';
        if (_debug_views) console.log('BIND VIEW: looking for view ', view_file, ' for action ', action_name);
        
        if (!path_module.existsSync(view_file)) {
            if (_debug_views) console.log( ' .. cannot find view; using scaffolding');
            view_file = MVC_VIEWS + '/scaffolding/' + action_name + '.html';
            if (!path_module.existsSync(view_file)) {
                switch (action_name) {
                case 'destroy':
                case 'create':
                case 'update':
                    
                // these actions generally route back to show or index - have no need for native view
                break;
                default:
                      throw new Error('cannot find view file for module ' + cont_module.name + ', action ' + action_name);
                }
            }
        }

        cont_module._views[action_name] = view_file;
    }
}