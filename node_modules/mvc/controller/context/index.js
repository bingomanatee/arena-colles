var fs = require('fs');
var bind_view = require('mvc/controller/bind_view');
var Gate = require('util/gate');
var jsinpath = require('util/jsinpath');

var Context = false;
var status = 'unloaded';

/**
 * NOTE: the complexity of this method
 * is to allow plugins to perform asynchronous
 * actions in plugin initializers
 */

module.exports = function(callback) {
    switch (status) {
    case 'loaded':
	return callback(null, Context);
	break;
    
    case 'loading':
	var check_loaded = setInterval(
	    function(){
		if (status == 'loaded'){
		    clearInterval(check_loaded);
		    callback(null, Context);
		}
	    },
	  100  
	);
	break;

    case 'unloaded':
	status = 'loading';

	function _no_index(path) {
	    return !/index$/.test(path);
	}

	var plugins = jsinpath(__dirname, true);
	plugins = plugins.filter(_no_index);
	var helpers = jsinpath(MVC_HELPERS, true);

	var gate = new Gate(function() {
	    status = 'loaded';
	    callback(null, Context)
	});

	Context = function(c) {
	    this.init(c);
	};

	plugins.forEach(function(plugin) {
	    console.log(__filename, ': loading plugin ', plugin);
	    gate.task_start();
	    require(plugin)(Context, gate);
	});

	helpers.forEach(function(plugin) {
	    console.log(__filename, ': loading helpers ', plugin);
	    gate.task_start();
	    require(plugin)(Context, gate);
	});

	gate.start();
	break;

    }

}