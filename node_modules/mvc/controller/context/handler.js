var ACL = require('mvc/acl');

module.exports = function(Context, gate) {

    Context.prototype.grant = function(if_true, if_false) {
	var self = this;
	var acl = new ACL(this);
	acl.can('*_' + self.controller.name, function(err, can) {
	    if (can) {
		acl.can(self.action + '_' + self.controller.name, function(err, can) {
		    can ? if_true() : if_false();
		});
	    } else {
		if_false();
	    }
	})
    }

    Context.prototype.launcher = function() {
	var self = this;
	return function(request, response, next) {
	    //   	 // console.log('handling ', request);
	    self.request = request;
	    self.response = response;
	    self.next = next;
	    self.handle();
	};
    }

    Context.prototype.handle = function() {
	console.log(__filename, ': handlie:: controller = ', this.controller.name, '; action = ', this.action);
	var self = this;

	self.grant(function() {
	    self.handler.call(self.controller, self);
	}, function() {
	    self.flash('You cannot ' + self.action + ' ' + self.controller.name, 'error', 'home')
	})
    }

    gate.task_done();
}