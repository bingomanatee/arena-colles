var path = require('path');
var inflect = require('inflect');
var mvc_models = require(MVC_MODELS);
var controller_action = require('./controller_action');

/**
 * @TODO: JSON / service inflection
 */

module.exports = {
    init: function(name, app) {
         // console.log(__filename, ': init(', name, ')');

        var self = this;
        var module_path = MVC_CONTROLLERS + '/' + name;

        if (!path.existsSync(module_path + '.js')) {
            throw new Error(__filename + ': cannot load controller ' + name);
        };

        var module = require(module_path);
        module.name = name;

         // console.log('loading model for ' + name);

        mvc_models.model(name, {}, function(err, model) {
             // console.log('... model ' + name + ' loaded');

            if (err) {
                 // console.log(__filename + ': init - cannot create model for ' + name);
                throw err;
            }
            module.model = model;
            self.bind_controller(module, app);
        });
    },

    _action_names: ['index', 'show', 'add', 'create', 'update', 'edit', 'delete', 'destroy'],

    bind_controller: function(module, app) {
        var self = this;

        if (module.hasOwnProperty('config')) {
            var config = module.config;
        } else {
            var config = {};
        }

         // console.log(__filename, ': controller: ', module.name, ': config = ', config);
        self._action_names.forEach(function(action_name) {
            if (config.hasOwnProperty('included_actions')) {
                if (config.included_actions.indexOf(action_name) > -1) {
                    self.bind_action(module, app, action_name);
                }
            } else if (config.hasOwnProperty('excluded_actions')) {
                if (config.excluded_actions.indexOf(action_name) == -1) {
                    self.bind_action(module, app, action_name);
                }
            } else {
                self.bind_action(module, app, action_name);
            }
        });
    },

    bind_action_report: function(mode, route_path) {
         // console.log('binding ' + mode + ': ' + route_path);
        // no echo for now
    },

    _bind_action_view: function(module, action_name) {
        var view_name = '_' + action_name + '_view';

        var view_file = module.name + '/' + action_name + '.html';

        if (!path.existsSync(MVC_VIEWS + '/' + view_file)) {
            view_file = 'default/' + action_name + '.html';
        }

        module[view_name] = view_file;
    },

    _get_action: function(module, action_name) {
        var self = this;
        var override_path = MVC_CONTROLLERS + '/' + module.name + '/' + action_name + '.js';

        if (path.existsSync(override_path)) {
            return require(override_path);
        } else if (module.hasOwnProperty(action_name)) {
            return module[action_name];
        } else {
            if (!this._actions.hasOwnProperty(action_name)) {
                this._actions[action_name] = require('./actions/' + action_name);
            }
            return this._actions[action_name];
        }
    },

    bind_action: function(module, app, action_name, config) {
        var self = this;

        if (!config) {
            config = module.config;
        }

        if (!config) {
            config = {};
        }

        var action_function = this._get_action(module, action_name);

        if (!config.no_view) {
            this._bind_action_view(module, action_name);
        }

        var plural = inflect(module.name);

        switch (action_name) {
        case 'index':
            // Special case for "app"
            if (module.name == 'app') {
                var route_path = '/';
            } else {
                var route_path = plural + '.format?';
            }
             // console.log('binding ', module.index.toString(), ' to ', route_path);
            app.get(route_path, action_function);
            this.bind_action_report('GET', route_path);
            break;

        case 'show':
            var route_path = plural + '/' + ':id.:format?';
            app.get(route_path, action_function);
            this.bind_action_report('GET', route_path);
            break;

        case 'add':
            var route_path = plural + '/' + ':id/add';
            app.get(route_path, action_function);
            this.bind_action_report('GET', route_path);
            23
            break;

        case 'edit':
            var route_path = plural + '/' + ':id/edit';
            app.get(route_path, action_function);
            this.bind_action_report('GET', route_path);
            break;

        case 'update':
            var route_path = plural + '/' + ':id.:format?';
            app.put(route_path, action_function);
            this.bind_action_report('PUT', route_path);
            break;

        case 'delete':
            var route_path = plural + '/' + ':id/delete';
            app.get(route_path, action_function);
            this.bind_action_report('GET', route_path);
            break;

        case 'destroy':
            var route_path = plural + '/' + ':id.format?';
            app.delete(route_path, action_function);
            this.bind_action_report('DELETE', route_path);
            break;

        case 'create':
            var new_config = _.clone(config);
            var route_path = plural + '/' + ':id.format?';
            app.post(route_path, action_function);
            this.bind_action_report('POST', route_path);
            break;
        }

    },

    _actions: {}

}