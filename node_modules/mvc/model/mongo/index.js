var Model = require('mvc/model');
var mongo = require('mongodb');
var BSON = mongo.BSONPure;
var db = require(MVC_MODELS + '/db');
var util = require('util');

/*
 ' Note - there are differences between methods like find and all
 * and analogous methods in the collection class.
 * in the case of get, one object is returned from the collection
 * (not an array of objects).
 * find and all returns an array of objects, not a cursor.
 * 
 */
module.exports = exports = {

    init: require('./init'),

    _db: null,
    
    make_model: require('./make_model'),

    mixins: {

        name: function() {
            return this.config.collection.collectionName;
        },

        drop: function(callback) {
            this.config.coll.drop(callback);
        },

        all: require('./all'),

        command: function(c, callback) {
            this.config.db.command(c, callback);
        },

        count: function(q, callback) {
            return this.config.coll.count(q, callback);
        },

        _as_oid: require('./as_oid'),

        string_id: false,

        get: require('./get'),

        "find_and_delete": function(query, callback) {
            this.config.coll.remove(query, callback);
        },

        put: require('./put'),

        insert: require('./insert'),

        deref: require('./deref'),

        soft_delete: false,

        "delete": require('./delete'),

        remove: function(crit, cb){
            this.config.coll.remove(crit, cb);
        },

        update: require('./update'),

        index: function(data, unique, callback) {
            if (unique && (typeof(unique) != 'object')){
                throw new Error('index failed legacy check')
            }
            this.config.coll.ensureIndex(data, unique, callback);
        },

        find: require('./find'),

        find_one: require('./find_one')
    }
}