var string_utils = require('util/string');
var Gate = require('util/gate');

/**
 * Note - the actions property of a member is dyamic - it is created by
 * loading the member into the session with get_with_grants().
 * however, ACL doesn't rely on a member having an actions property.
 * If for instance you are looking at a member who is not the session member
 * it will check the grants in the database for that user.
 */

function Acl(config) {
    for (var param in config) {
        switch (param) {
        case 'request':
        case 'response':
        case 'controller':
            var value = config[param];
            this['_' + param] = value;
            break;
        }
    }
}

module.exports = Acl;

Acl._grants = [];

Acl.prototype.can = function(action, callback) {
    if (!Acl._grants.hasOwnProperty(action)){
        return callback(null, true);
    }
    var self = this;
    
    if (self._member){
        return callback (null, (self._member.actions.indexOf(action) > -1));
    }
    
    function _has_models() {
        if (!self._member)  {
            self._member = self._members_model.session_member(self._request);
        }
        
        if (self._member){
            if(self._member.hasOwnProperty('actions')){
                return callback (null, (self._member.actions.indexOf(action) > -1));
            }
            
             // console.log(__filename, ': delegating to grants model');
            self._grants_model.can(self._member, action, callback);
        } else {
            callback(null, false);
        }
    }

    var gate = new Gate(_has_models);

    if (!this._grants_model) {
        gate.task_start();
        require(MVC_MODELS).model('grants', function(err, grants_model) {
            self._grants_model = grants_model;
            gate.task_done();
        });
    };

    if (!this._members_model) {
        gate.task_start();
        require(MVC_MODELS).model('members', function(err, members_model) {
            self._members_model = members_model;
            gate.task_done();
        });
    };

    gate.start();
}

Acl.prototype.request = function(request) {
    this._request = request;
    return this;
}

Acl.prototype.response = function(response) {
    this._response = response;
    return this;
}

Acl.prototype.controller = function(controller) {
    this._controller = controller;
    return this;
}

var models_module = require(MVC_MODELS);

models_module.model('grants', function(err, grants_model){
    if (err) {
        throw err;
    }
    else {
    grants_model.all(function(err, grants){
        grants.forEach(function(grant){
            Acl._grants[grant._id] = grant; 
        });
    })
        
    }
})