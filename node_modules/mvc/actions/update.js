var inflect = require('inflect');

module.exports = function(context) {
    var self = this;
    if (context.request.body.hasOwnProperty(self.name)) {
        var item = context.request.body[self.name];
         // console.log(__filename, ': item = ', item, ': body = ', context.request.body, ': name = ', self.name);

        if ((!item.hasOwnProperty('_id')) || (item.hasOwnProperty('_id') && (!item._id))) {
            if (context.request.body.params.id) {
                item._id = context.request.body.params.id;
            }
        }

        if (!item._id) {
            return context.flash('no ID for ' + self.name, 'error', '/' + inflect(self.name));
        }

        function _put_handler(err, result) {
            if (err) {
                 // console.log(__filename, ': put error ', err);
                context.flash('Cannot save ' + self.name, 'error', '/' + inflect(self.name));
            } else if (result) {
                 // console.log(__filename, ': ************* put result: ', result, ' model, ', self.model);
                context.flash(self.name + ' updated', 'info', '/' + inflect(self.name) + '/' + result._id);
            } else {
                context.flash('Cannot save ' + self.name, 'error', '/' + inflect(self.name));
            }
        }

        function _get_handler(err, old_item) {
            if (err) {
                next(err);
            } else {
                 // console.log(__filename, ': old item: ', old_item);
                /*
                 We are assuming
                 a) any unset fields should retain their old value
                 b) any set fields should completely overwrite their old value
                 any more granular treatment requires custom code.
                */
                 // console.log(__filename, '= ========= pre defaults item: ', item);
                var out =  _.defaults(item, old_item);
                 // console.log(__filename, ':: _get handler putting ', item, '(out = ', out, ')')
                self.model.put(item, _put_handler);
            }
        }

        self.model.get(item._id, _get_handler);

    } else {
        context.flash('cannot find in body, ' + self.name, 'error', '/' + inflect(self.name));
    }

}