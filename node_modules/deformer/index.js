var ejs           = require('ejs');
var fs            = require('fs');
var Gate          = require('util/gate');
var path_module   = require('path');
var option_utils  = require('./utils/options');

var properties_template = fs.readFileSync(__dirname + '/templates/properties.html').toString();

module.exports = function(values, fields, configs) {
    var self = this;

    if (!configs) {
        configs = {};
    }

    _.defaults(configs, {
        method: 'POST',
        action: '',
        templates: {}
    });
    _.defaults(configs.templates, {
        form: 'form'
    });

    this.values = values ? values : {};
    this.configs = configs;
    this.templates = configs.templates;
    this.fields = fields ? fields : [];

    if (this.configs.hasOwnProperty('context')) {
        this._contextualize();
    }
}

module.exports.prototype.init = function(callback) {
    // console.log(__filename, ' initializing form ');
    var self = this;
    var gate = new Gate(function() {
        if (!self.configs.no_submit) {
            self.ensure_submit_button();
        }
       // console.log(__filename, ': done with GATE for init');
        callback(null, self);
    });
    gate.debug = true;

    this.fields.forEach(function(field, index) {
        if (typeof(field) == 'string') {
            self.fields[index] = field = {
                name: field
            };
        }
       // console.log(__filename, ' initializing field ', field.name);
        if (field.hasOwnProperty('callback')) {
            gate.task_start();
            field.callback(field, function(){ console.log(__filename, ': done with field ', field.name);  gate.task_done(); });
        } else {
            // console.log(__filename, ':: init - no callback on ', field.name);
        }

        if (field.hasOwnProperty('properties') && field.properties &&  (typeof(field.properties) == 'object')) {
          field.properties = ejs.render(properties_template, { locals: {  properties: field.properties}});
        } else {
            field.properties = '';
        }
        
        if (field.hasOwnProperty('options')){
          field.options = option_utils(field.options);
        }
    });

    gate.start();
}

module.exports.prototype._contextualize = function() {
    var context = this.configs.context;
    var self = this;

    if (!context) return;

    this.fields.forEach(function(field) {
        var name_parts = field.name.split(/[\[\]]/g);

        if (name_parts.length > 1) {
            var root_name = name_parts[1];
            if (self.values.hasOwnProperty(root_name)) {
                self.values[field.name] = self.values[root_name];
                // @TODO: delete original?
            }
        }
    });
}

module.exports.prototype.ensure_submit_button = function() {
    var submit_found = false;

    this.fields.forEach(function(field) {
        if (!submit_found && field.type == 'submit') {
            submit_found = true;
        }

    })
    if (!submit_found) {
        this.fields.push({
            type: 'submit',
            name: 'submit',
            label: '',
            value: 'Save'
        });
    }
}

module.exports.prototype.render = function() {
    var self = this;

    for (var name in this.values) {
        self.fields.forEach(function(field) {
            if (field.name == name) {
                field.value = self.values[name];
            }
        })
    }

    this.fields.forEach(function(field) {
        self.render_field(self, field);
    });

    return this.render_form();
}

module.exports.prototype.set_form_properties = function() {
    if (this.configs.hasOwnProperty('properties') && this.configs.properties) {
        if (typeof(this.configs.properties) == 'object') {
            this.configs.properties = ejs.render(properties_template, {
                locals: {
                    properties: this.configs.properties
                }
            });
        }
        this.properties = this.configs.properties;
    } else {
        this.properties = '';
    }
}

module.exports.prototype.labellize = function(name) {
    return name ? this.toTitleCase(name.replace('_', ' ')) : ''; // @TODO: better word caps
}

module.exports.prototype.toTitleCase = function(item) {
    return item.replace(/([\w&`'ту"р.@:\/\{\(\[<>_]+-? *)/g, function(match, p1, index, title) {
        if (index > 0 && title.charAt(index - 2) !== ":" && match.search(/^(a(nd?|s|t)?|b(ut|y)|en|for|i[fn]|o[fnr]|t(he|o)|vs?\.?|via)[ \-]/i) > -1) return match.toLowerCase();
        if (title.substring(index - 1, index + 1).search(/['"_{(\[]/) > -1) return match.charAt(0) + match.charAt(1).toUpperCase() + match.substr(2);
        if (match.substr(1).search(/[A-Z]+|&|[\w]+[._][\w]+/) > -1 || title.substring(index - 1, index + 1).search(/[\])}]/) > -1) return match;
        return match.charAt(0).toUpperCase() + match.substr(1);
    });
};

module.exports.prototype._template_path = function(self, field) {
    var template_path = field.type + '.html';

    if (self.configs.templates.hasOwnProperty(field.type)) {
        template_path = self.configs.templates[field.type];
    }

    if (field.hasOwnProperty('template')) {
        template_path = field.template;
    }

    if (field.hasOwnProperty('properties')) {
        field.property = ejs.render(properties_template, {
            locals: {
                properties: field.properties
            }
        });
    }

    if (/^\//.test(template_path)) {} else {
        template_path = __dirname + '/templates/' + template_path;
    }

    if (!/\.html/.test(template_path)) {
        template_path += '.html';
    }

    return template_path;
}

module.exports.prototype.render_field = function(self, field) {

    if (!field.type) {
        field.type = 'text';
    }

    if (!field.hasOwnProperty('label')) {
        field.label = self.labellize(field.name);
    }

    var template_path = this._template_path(self, field);

    if (!path_module.existsSync(template_path)) {
        throw new Error(__filename + ': cannot find template ' + template_path);
    }

    var template_file = fs.readFileSync(template_path, 'utf8');
    // console.log(__filename, '::render_field - ', field, ' rendering template ', template_path, ': ', template_file);
    try {
        field.rendered = ejs.render(template_file, {
            locals: {
                form: this,
                field: field
            }
        });
    } catch (err) {
        // console.log(__filename, ':: render_field error with field ', field.name, err);
    }
    // console.log(__filename, ':: render_field -- done with field', field.name)
}

module.exports.prototype.render_form = function() {
    this.set_form_properties();

    var template_path = this._template_path(this, {
        type: 'form'
    });

    // console.log(__filename, '::render_field - rendering form ', template_path);
    var template_file = fs.readFileSync(template_path, 'utf8');

    return ejs.render(template_file, {
        locals: this
    });

}