module.exports = function() {
    var context = this.configs.context;
    var self = this;

    if (!context) return;

    console.log(__filename, ': contextualize - values = ', self.values);
    this.fields.forEach(function(field) {
        try {
            var name_parts = field.name.split(/[\[\]]/g);
            var name_parts = _.filter(name_parts, function(f) {
                return f
            });
            //      console.log(__filename, ': contextualize: FIELD ========== ', field.name, ': parts: ', name_parts);
            if (name_parts.length) {
                part = name_parts.shift();
                if (context == part) {
                    var value = self.values;
                    //      console.log('value = ', value);
                    while (name_parts.length) {
                        part = name_parts.shift();
                        if (value.hasOwnProperty(part)) {
                            //                    console.log('found ', part, ' in ', value);
                            value = value[part];
                        } else {
                            name_parts = [];
                            value = false;
                        }
                    }
                } else {
                    //        console.log('name ', field.name, ' not in context');
                }
            } else {
                //      console.log('no elements in ', field.name);
                value = false;
            }
            if (value || (value === 0) || (!field.value)) {
                self.values[field.name] = field.value = value;
            }
        } catch (err) {
            console.log(__filename, ': field - ', field.name, ': ERROR *********** - ', err);
        }
    });
}