var import_module = require('./import');
var cti = require('util/canvas/to_image');
var Stat = require('stat');
var Canvas = require('canvas');
var color_module = require('util/colors/scale');

MOLA = function(path, rows, cols, scale) {
    this.path = path;
    this.scale = scale;
    this.columns = cols;
    this.rows = rows;
    this.data = [];
    this.avg = null;
    this.std_dev = null;
}

module.exports = MOLA;

MOLA.prototype = {
    read: function(callback) {
        var self = this;
        import_module(this.path, this.rows * this.columns, function(err, data) {
            console.log('read ', data.length, ' ints');
            self.data = data;
            callback(this);
        })
    },
    
    measure: function(samples){
        var increment = Math.max(1, this.data.length / samples);
        
        var samp = [];
        
        for (var i = 0; i < this.data.length; i += increment){
            samp.push(this.data[i]);
        }
        
        var stat = new Stat(samp);
        this.std_dev = stat.std_dev();
        this.avg = stat.avg();        
    },
    
    height_color: function(h){
        /*
        h -= this.avg;
        h += this.std_dev;
        h /= 3 * this.std_dev;
        h *= 255; */
        //var c = Math.max(0, Math.min(255, parseInt(h)));
        var n = color_module.nearest(h, this.scale);
        
        return n.rgb;
    },

    as_canvas: function() {
        var rows = Math.ceil(this.data.length / this.columns);
        console.log(__filename, ': l = ', this.data.length );
        console.log(__filename, ': writing canvs for ', this.columns, ', ', rows);
        var canvas = new Canvas(this.columns, rows);
        var ctx = canvas.getContext('2d');
        var id = ctx.createImageData(canvas.width, canvas.height);
        var base = 0;
        var self = this;
        
        this.data.forEach(function(height) {
            var rgb =self.height_color(height);
            id.data[base] = rgb[0];
            id.data[base + 1] = rgb[1];
            id.data[base + 2] = rgb[2];
            id.data[base + 3] = 255;
            base += 4;
        });
        
        ctx.putImageData(id, 0, 0);
        return canvas;
    },

    draw: function(png_path, callback) {
        var canvas = this.as_canvas();
        console.log('writing ', png_path);
        cti(canvas, png_path, callback);
    }
}