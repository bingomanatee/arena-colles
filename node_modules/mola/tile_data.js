/**
 * i, j are units of tile chunks r, c
 * returns a 1D array of image data. 
 */

var Gate            = require('util/gate');
var mm              = require(MVC_MODELS);
var MOLA            = require('mola');
var sectors_model   = false;
var Pipe            = require('util/pipe');

module.exports = {
    get_tile_data: function(i, j) {

        // --------- BREAK
        var self = this;
        var img_data = [];

        var r = this._tile_row(i);
        var c = this._tile_col(j);
        var r_end = this._tile_row(i + 1);
        var c_end = this._tile_col(j + 1);

        // console.log('getting data from r ', r, ' ... ', r_end, ' x ', c , ' ... ', c_end, '(', (r_end - r), ' x ' , (c_end - c), ')');
        for (var r_sub = r; r_sub < r_end; ++r_sub) {
            img_data = img_data.concat(self.data[r_sub].slice(c, c_end));
        }

        return img_data;

    },

    _save_tile_data: function(pipe, tile, std_callback) {
      //  console.log(__filename, ': _save_tile_data( PIPE, TILE: ', tile, ',  CALLBACK:   ', std_callback, ')');
        
        if (!tile){
            pipe.finish();
            return std_callback();
        }
        var i = tile.i;
        var j = tile.j;
        var tile_data = this.get_tile_data(i, j);

        var north = this._tile_lat(j);
        var south = this._tile_lat(j + 1);
        var east = this._tile_long(i);
        var west = this._tile_long(i + 1);
        var out = {
            map: this.map_id,
            image_file: this.data_file.image_file,
            north: north,
            south: south,
            east: east,
            west: west,
            i: i,
            j: j
        };

      //  console.log('saving ', out);
        out.heights = tile_data;
        sectors_model.put(out, function(err, result) {
            if (!(result.j % 4)) {
                console.log('saved ', result.i, result.j, result.image_file);
            }
            std_callback();
        });
    },

    _tile_series: function() {
        var tile_rows = Math.ceil(this.get_rows() / this.get_pixels_per_col());
        var tile_cols = Math.ceil(this.get_cols() / this.get_pixels_per_col());
        console.log('tiles: ', tile_rows, ' x ', tile_cols, ': ', tile_rows * tile_cols, ' total');
        var tiles = [];
        for (var i = 0; i < tile_rows; ++i) for (var j = 0; j < tile_cols; ++j) {
            tiles.push({
                i: i,
                j: j
            });
        };

        return tiles;
    },

    save_tile_data: function(callback) {
        var self = this;
        console.log(__filename, ': callback = ', callback);
        
/*
        sectors_model.delete({
            image_file: self.data_file.image_file
        }, function() {
            console.log('deleted old ', self.data_file.image_file, ' sector data');

                var action = function(pipe, tile, callback) {
                    self._save_tile_data(pipe, tile, callback);
                };


            if (self.hasOwnProperty('data_read') && self.data_read) {
                console.log('file data already read...');

                var pipe = new Pipe(callback, action, self._tile_series(), 100);
                pipe.start();
                
                // self._save_tile_data(i, j, gate.task_done_callback(true));
            } else {
                console.log('reading file data');
                self.read(function() {
                    var pipe = new Pipe(callback, action, self._tile_series(), 100);
                    pipe.start();
                });
            }
*/

    //    })
    },

    load: function(callback) {
        console.log(__filename, ':: load() starting');
        require('./accessors').load();

        require('./tile_lat_long').load();

        if (!(MOLA.extensions.hasOwnProperty('tile_data') && MOLA.extensions.tile_data)) {

            for (var prop in module.exports) {
                if (prop != 'load') {
                    MOLA.prototype[prop] = module.exports[prop];
                }

            }

            MOLA.extensions.tile_data = true;

            mm.model('map_sectors', function(err, ms) {
                sectors_model = ms;
                console.log(__filename, ': LOADED');
                callback();
            })
        }

    }

}