var Point = require('walker/grid/point');
var Grid = require('walker/grid');

function Walk(points, id) {
  //  console.log('Walk constructor: ', id);
    this._id = id ? id : '';
    this.points = points ? points : [];
}

Walk.load = function(item){
    return new Walk(item.points, item._id);
}

var echo = 0;

Walk.prototype = {

    last: function() {
        return this.points[this.points.length - 1];
    },

    last_direction: function() {
        if (this._id.length) {
            return this._id.substring(this._id.length - 1);
        } else {
            return ''
        }
    },

    serialize: function() {
        var out = {
            _id: this._id,
            last: this.last(),
            points: this.points,
            steps: this.points.length,
            last_direction: this.last_direction()
        };
        return out;
    },

    __toString: function() {
        var out = '';
        this.points.forEach(function(p) {
            out += ' ' + p.i + ',' + p.j;
        });
        return out;
    },

    overlap: function() {
        if (this.points.length > 1) {
            return _overlap(this.points.slice(0));
        } else {
            return false;
        }
    },

    clone_to: function(i, j, d) {
     //   console.log('going to ', i, ', ', j, ': ', d);
        return this.copy({
            i: i,
            j: j
        }, d);
    },

    n: function() {
        var last = this.last();
        return this.clone_to(last.i - 1, last.j, 'n');
    },

    s: function() {
        var last = this.last();
        return this.clone_to(last.i + 1, last.j, 's');
    },

    e: function() {
        var last = this.last();
        return this.clone_to(last.i, last.j + 1, 'e');
    },

    w: function() {
        var last = this.last();
        return this.clone_to(last.i, last.j - 1, 'w');
    },

    copy: function(p, d) {
        var points = this.points.slice();
        points.push(p);
        var out = new Walk(points, this._id + d);
        return out;
    },

    parent_id: function() {
        if (this._id.length) {
            return this._id.substring(0, this._id.length - 1);
        } else {
            return false;
        }
    }

}

function _overlap(data) {
    var p = data.pop();
    while (data.length && p) {
        for (var n = 0; n < data.length; ++n) {
            var p2 = data[n];
            if ((p2.i == p.i) && (p2.j == p.j)){
                return true; 
            }
        }
        p = data.pop();
    }
    return false;
}

module.exports = Walk;