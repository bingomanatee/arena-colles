var Point = require('walker/grid/point');
var Grid = require('walker/grid');

function Walk(points, id) {
    this._id = id ? id : '';
    this.points = points ? points : [];
}

Walk.load = function(item){
    return new Walk(item.points, item._id);
}

var echo = 0;

Walk.prototype = {

    last: function() {
        return this.points[this.points.length - 1];
    },

    last_direction: function() {
        if (this._id.length) {
            return this._id.substring(this._id.length - 1);
        } else {
            return ''
        }
    },

    put: function(m, callback, parent, from_dir) {
        walk = this.serialize();
        console.log('*****PUTTING ', walk._id, '; parent: ', parent, '; fd: ', from_dir);
        if (parent && from_dir) {
            function _after_put() {
                data = {"$set": {}};
                data["$set"]['children.' + from_dir] = true;
                var filter = {
                    _id: parent._id
                };
                console.log('updating old ', filter, ' to ', data);
                m.update(data, callback, filter);
           //     callback();
            }
        } else {
            _after_put = callback;
        }

        m.put(walk, _after_put);
    },

    serialize: function() {
        var out = {
            _id: this._id,
            last: this.last(),
            points: this.points,
            steps: this.points.length,
            children: {n: false, e: false, w: false, s: false}
        };
        
        console.log(__filename, ': id = ', this._id, '; ld: ', this.last_direction());
        
        switch(this.last_direction()){
            case 'e':
                delete out.w;
                break;
            
            case 'w':
                delete out.children.e;
                break;
            
            case 'n':
                delete out.children.s;
                break;
            
            case 's':
                delete out.children.n;
                break;
            
        }
        return out;
    },

    __toString: function() {
        var out = '';
        this.points.forEach(function(p) {
            out += ' ' + p.i + ',' + p.j;
        });
        return out;
    },

    overlap: function() {
        if (points.length) {
            return _overlap(this.points.slice(0));
        } else {
            return false;
        }
    },

    go_to: function(i, j, d) {
        console.log('going to ', i, ', ', j, ': ', d);
        return this.copy({
            i: i,
            j: j
        }, d);
    },

    n: function() {
        var last = this.last();
        return this.go_to(last.i - 1, last.j, 'n');
    },

    s: function() {
        var last = this.last();
        return this.go_to(last.i + 1, last.j, 's');
    },

    e: function() {
        var last = this.last();
        return this.go_to(last.i, last.j + 1, 'e');
    },

    w: function() {
        var last = this.last();
        return this.go_to(last.i, last.j - 1, 'w');
    },

    copy: function(p, d) {
        var points = this.points.slice();
        points.push(p);
        var out = new Walk(points, d, this._id + d);
        return out;
    },

    parent_id: function() {
        if (this._id.length) {
            return this._id.substring(0, this._id.length - 1);
        } else {
            return false;
        }
    }

}

function _overlap(data) {
    pt = data.pop();
    while (data.length && pt) {
        for (var n = 0; n < data.length; ++n) {
            if ((data[n].i == pt.i) || (data[n].j == pt.j)) return true;
        }
        pt = data.pop()
    }
    return false;
}

function _children(dir) {
    console.log(__filename, ': children (', dir , ')');
    switch (dir) {
    case 's':
        return {
            e: false,
            s: false,
            w: false
        }
        break;

    case 'n':
        return {
            n: false,
            e: false,
            w: false
        }
        break;

    case 'e':
        return {
            n: false,
            s: false,
            e: false
        }
        break;

    case 'w':
        return {
            n: false,
            s: false,
            w: false
        }
        break;

    }

    return {
        n: false,
        s: false,
        e: false,
        w: false
    }
}

module.exports = Walk;