var Point = require('./point');

_grid_id = 1000;

/**
 * Note: points are stored redundantly in points_array, for iteration,
 * and points, a named property object, for retrieval.
 *
 *  i and j indicate number of points in the i and j axis. 
 */

function Grid(i, j, props) {
    this.i = i;
    this.j = j;
    this.unit = 1;
    this.i_offset = 0;
    this.j_offset = 0;

    if (props) for (prop in props) this[prop] = props[prop];

    this.points = {};
    this.points_array = [];
    this.ID = 'GRID ' + _grid_id;
    ++_grid_id;
}

Grid.prototype = {

    init: function() {
        console.log(__filename, ': intializing Grid');
        var self = this;
        for (var i = this.i_offset; i < this.i_offset + this.i; ++i) for (var j = this.j_offset; j < this.j_offset + this.j; ++j) {

            var key = i + '.' + j;

            this.points[key] = point = new Point(i, j, self);
            this.points_array.push(point);
        }
        this.j_max = this.j_offset + this.j;
        this.i_max = this.i_offset + this.i;
    },

    _compass_points: [
        [0, -1, 'N'],
        [1, 0, 'E'],
        [0, 1, 'S'],
        [-1, 0, 'W']
    ],

    pt: require('walker/grid/p'),

    p: require('./p'),

    oor: function(i, j) {
        var m = '';
        if (i < this.i_offset) {
            m += i + '<' + this.i_offset + '; ';
        }

        if (i >= this.i_max) {
            m += i + '>=' + this.i_max + '; ';

        }

        if (j < this.j_offset) {
            m += j + '<' + this.j_offset + '; ';

        }

        if (j >= this.j_max) {
            m += j + '>=' + this.j_max + '; ';
        }


        var oor = __filename + ': out of range point request: ' + i + ', ' + j + ')';
        oor += ' beyond grid range of [' + this.i_offset + '..' + (this.i + this.i_offset - 1) + '],[' + this.j_offset + '..' + (this.j + this.j_offset - 1) + '] -- ' + m;
        throw new Error(oor);
    },

    on_map: function(i, j) {
        if (typeof i == 'object') {
            i = i.i;
            j = i.j;
        }
        
     //   console.log(__filename, 'on_map: testing ', i, ',', j);
        
        if (i < this.i_offset) {
            return false;
        }

        if (i >= this.i_max) {
            return false;

        }

        if (j < this.j_offset) {
            return false;

        }

        if (j >= this.j_max) {
            return false;
        }
        return true;
    }
}

module.exports = Grid;