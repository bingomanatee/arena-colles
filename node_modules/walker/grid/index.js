var Point = require('./point');
console.log(__filename, ' :  REQUIREING GRID =========== ');

_grid_id = 1000;

/**
 * Note: points are stored redundantly in an array, for iteration,
 * and a named property object, for retrieval. 
 */

function Grid(i, j) {
    this.i = i;
    this.j = j;
    this.unit = 1;
    this.i_offset = 0;
    this.j_offset = 0;

    this.points = {};
    this.points_array = [];
    this.ID = 'GRID ' + _grid_id;
    ++_grid_id;
}

Grid.prototype = {

    init: function() {
        console.log(__filename, ': intializing Grid');
        var self = this;
        for (var i = 0; i < this.i; ++i) for (var j = 0; j < this.j; ++j) {

            var key = i + '.' + j;

            this.points[key] = point = new Point(i, j, self);
            this.points_array.push(point);
        }

    },

    _compass_points: [
        [0, -1, 'N'],
        [1, 0, 'E'],
        [0, 1, 'S'],
        [-1, 0, 'W']
    ],

    pt: require('walker/grid/p'),

    p: function(i, j, v) {
        if (typeof i == 'object') {
            v = j;
            var ii = i;
            if (i.hasOwnProperty('length')) {
                ii = i.shift();
                j = i.shift();
            } else {
                i = ii.i;
                j = ii.j;
            }
        }

        if ((i >= this.i || j >= this.j) || (i < 0 || j < 0)) this.oor(i, j);
        // note- not using on_map for efficiencies' sake. 
        var key = i + '.' + j;
        var p = this.points[key];

        if (v) { // set
            _.defaults(v, p)
            // supplement v with any pre-existing values of old point that are not set by v
            this.points[key] = v;
            return v;
        } else { // get
            return p;
        }
    },

    oor: function(i, j) {
        var oor = __filename + ': out of range point request: ' + i + ', ' + j + ')';
        oor += ' beyond grid range of [0..' + (this.i - 1) + '],[0..' + (this.j - 1) + ']';
        throw Error(oor);
    },

    on_map: function(i, j) {
        if (typeof i == 'object') {
            i = i.i;
            j = i.j;
        }
        if (i >= this.i || j >= this.j) return false;
        if (i < 0 || j < 0) return false;
        return true;
    }
}

var p = require('./p');

console.log(__filename, ': p = ', p.toString());

Grid.prototype.p = p;

console.log(__filename, ': Grid.prototype: ', Grid.prototype);
module.exports = Grid;