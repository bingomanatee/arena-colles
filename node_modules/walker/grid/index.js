var Point = require('./point');

/**
 * Note: points are stored redundantly in an array, for iteration,
 * and a named property object, for retrieval. 
 */
Grid = function(i, j, props) {
    this.i = i;
    this.j = j;

    if (!props) props = {};

    _.defaults(props, {
        i_offset: 0,
        j_offset: 0,
        unit: 1
    });
    _.defaults(this, props);

    this.points = {};
    this.points_array = [];
    this._init();

}

Grid.prototype = {

    _init: function() {
        var self = this;
        for (var i = 0; i < this.i; ++i) for (var j = 0; j < this.j; ++j) {

            var key = i + '.' + j;

            this.points[key] = point = new Point(i, j, self);
            this.points_array.push(point);
        }

        this.link();
    },

    _compass_points: [
        [0, -1, 'N'],
        [1, 0, 'E'],
        [0, 1, 'S'],
        [-1, 0, 'W']
    ],

    link: require('./link.js'),

    p: require('./p'),

    oor: function(i, j) {
        var oor = __filename + ': out of range point request: ' + i + ', ' + j + ')';
        oor   += ' beyond grid range of [0..' + (this.i - 1) + '],[0..' + (this.j - 1) + ']';
        throw Error(oor);
    },

    on_map: function(i, j) {
        if (typeof i == 'object') {
            i = i.i;
            j = i.j;
        }
        if (i >= this.i || j >= this.j) return false;
        if (i < 0 || j < 0) return false;
        return true;
    }
}

module.exports = Grid;