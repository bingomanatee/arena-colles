var util = require('util');
var _ = require('underscore');

function Cell(parent, row, col, height) {
    this.parent = this.terrain = parent;
    this.row = row;
    this.col = col;
    this.height = height ? height : 0;
    this.neighbors = {};
}

Cell.prototype = {
    each_neighbor:function (do_f) {
        for (var dir in this.neighbors) {
            var neighbor = this.neighbors[dir];
            do_f(this, neighbor, dir);
        }
    },

        direct_neighbors: function(do_f){
            if (this.neighbors.n){
                do_f(this, this.neighbors.n, 'n');
            }
            if (this.neighbors.e){
                do_f(this, this.neighbors.e, 'e');
            }
            if (this.neighbors.s){
                do_f(this, this.neighbors.s, 's');
            }
            if (this.neighbors.w){
                do_f(this, this.neighbors.w, 'w');
            }
        },

            get_direct_neighbors: function(){
                var out = [];
                if (this.neighbors.n){
                    out.push( this.neighbors.n);
                }
                if (this.neighbors.e){
                    out.push( this.neighbors.e);
                }
                if (this.neighbors.s){
                    out.push( this.neighbors.s);
                }
                if (this.neighbors.w){
                    out.push( this.neighbors.w);
                }

                return out;
            },

    get_neighbors:function (filter) {
        var out = [];
        if (filter) {
            var n = this.neighbors[dir];
            if (filter(n)) {
                out.push[n];
            }
        } else {
            for (var dir in this.neighbors) {
                out.push(this.neighbors[dir]);
            }
        }
        return out;
    },

    neighborhood:function (do_f, range) {
        var t = this.terrain;
        var self = this;
        t.slice(this.col - range, this.row - range, this.col + range, this.row + range).forEach(function (n) {
            do_f(n, self);
        });
    },

    equals:function (n) {
        return ((n.row == this.row) && (n.col == this.col));
    },

    slice: function(distance){

        var c_min = this.col - distance;
        var r_min = this.row - distance;

        var c_max = this.col + distance;
        var r_max = this.row + distance;

        return this.terrain.slice(c_min, r_min, c_max, r_max);

    }

}

module.exports = Cell;