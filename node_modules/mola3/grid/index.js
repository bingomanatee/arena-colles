function Grid(data, rows, cols) {
    this.data = data;
    this.rows = typeof rows == 'number' ? rows : data ? data.length : 0;
    this.cols = typeof cols == 'number' ? cols : data? data[0].length : 0;
}

Grid.prototype = {

    get_value:function (r, c) {
        if ((r < 0) || (r >= this.rows) || (c < 0) || (c >= this.cols)) {
            return null;
        }
        return this.data[r][c];
    },

    set_value:function (r, c, v) {
        if ((r < 0) || (r >= this.rows) || (c < 0) || (c >= this.cols)) {
            return null;
        }

        return this.data[r][c] = v;
    },

    spline_double:function () {
        var sd_f = require('./spline_double');
        this.spline_double = sd_f;
        return sd_f.call(this);
    },

    write_to: function(fn, cb){
        var write_to = require('./write_to');
        this.write_to = write_to;

        write_to.call(this, fn, cb);
    },

    reset:function () {
        var new_data = [];
        for (var r = 0; r < this.rows; ++r) {
            var col = [];
            for (var c = 0; c < this.cols; ++c) {
                col.push(0);
            }
            new_data.push(col);
        }
        this.data = new_data;
    },

    slice:function (r1, c1, r2, c2) {
        var data = [];
        c1 = Math.max(0, c1);
        c2 = Math.min(c2, this.cols);
        r1 = Math.max(0, r1);
        r2 = Math.min(this.rows, r2);
        for (var r = r1; r < r2; ++r) {
            data.push(this.data[r].slice(c1, c2));
        }

        return new Grid(data);
    }

}

module.exports = Grid;