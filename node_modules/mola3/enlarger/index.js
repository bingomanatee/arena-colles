/**
 * Haven't you always wished you were larger?
 * This scales a heightmap and uses a "gravitational influence model"
 * to interpolate the data into the new grid.
 *
 * @param tile Object:mapimage_tile
 * @param scale int - the multiplier that determines the size of the original grid.
 *                    should be an integer, 2 or more.
 *
 *    gravity: the power by which the influence of distant heights is diminished. A power of two reflects the
 *             influence of mass, but that is not necessarily the best way to model height weights...
 *             Should be a number >= 1; ideally in the 1.5...3 range. The greater the max_dist value, the lower gravity should be.
 *             consider that max_dist ^ gravity will be the smallest influence weight for a point of data.
 *             so at the default values of dist 3, gravity 2, scale 2, the smallest influence weight would be 1/36;
 *             if you had max_dist at 4 , gravity 4, and scale 3, the smallest weight would be 1/20,000 - pretty weak!
 *             at that scale, a gravity of 1.5 gives you a max influence of 1/41 - more relevant.
 *
 *    max_dist: the farthest a point can be from a desination sample before its influence is ingored.
 *
 *    both of these values are relative to the original grid dimensions.
 */

module.exports = function (tile, scale) {
    this.scale = Math.max(2, parseInt(scale));
    this.tile = tile;
    this.i_start = this.tile.heights.length;
    this.j_start = this.tile.heights[0].length;
    this.i_height_scaled = this.i_start * this.scale;
    this.j_height_scaled = this.j_start * this.scale;

    this.data = this.scale_data();
    this.gravity = 2;
    this.max_dist = 3;
}

module.exports.prototype = {

    scale_data:function () {

        var out = [];
        for (var i = 0; i < this.i_height_scaled; ++i) {
            out.push([]);
        }

        return out;
    },

    bez_data:function () {
        console.log('i_start: %s, j_start: %s, i_scaled: %s, j_scaled: %s', this.i_start, this.j_start, this.i_height_scaled, this.j_height_scaled);
        for (var i = 0; i < this.i_start; ++i) {
            for (var j = 0; j < this.j_start; ++j) {
                var height = this.tile.heights[i][j];

                for (var i2 = i * this.scale; i2 < (i + 1) * this.scale; ++i2) {
                    for (var j2 = j * this.scale; j2 < (j + 1) * this.scale; ++j2) {
                        this.data[i2][j2] = height;
                    }
                }
            } // end j loop
        } // end i loop

    }

}

function _dist(i, j, i2, j2) {
    return Math.sqrt((i * i) + (j * j));
}